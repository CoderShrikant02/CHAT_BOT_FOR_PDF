# -*- coding: utf-8 -*-
"""Copy of Session_5_RAG_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oHvNS6fIh-vM0VYBvjAEMfwWPr7mwZ2X

##**Building a Retrieval Augmented Generation (RAG) Chatbot**

Using Gemini, LangChain, and ChromaDB

This notebook will guide you through implementing the backend components of a RAG chatbot system.

##Setup and Prerequisites

First, let's install the necessary libraries.
"""

# Install required packages


"""Next, let's import all required libraries:"""



import os
import pdfplumber
import google.generativeai as genai
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory

from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")

import streamlit as st
import os
from session_4_rag_backend import (
    upload_pdf,
    parse_pdf,
    create_document_chunks,
    init_embedding_model,
    embed_documents,
    store_embeddings,
    get_context_from_chunks,
    query_with_full_context
)

# Set Streamlit page configuration
st.set_page_config(
    page_title="RAG Chatbot",
    page_icon=":books:",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Sidebar for settings and API key input
with st.sidebar:
    st.header("Settings")
    api_key = st.text_input("Enter your Google API Key:", type="password")
    os.environ["GOOGLE_API_KEY"] = api_key if api_key else ""

    st.markdown("---")
    st.markdown(
        "**About:** This RAG chatbot uses Gemini, LangChain, and ChromaDB."
    )

# Main UI
st.title("Retrieval Augmented Generation (RAG) Chatbot")

# File Upload Section
st.header("1. Upload PDF Document")
uploaded_file = st.file_uploader("Choose a PDF file", type="pdf")

if uploaded_file is not None:
    # Save uploaded file
    with open("temp_pdf.pdf", "wb") as f:
        f.write(uploaded_file.getbuffer())
    pdf_path = "temp_pdf.pdf"

    st.success("File uploaded successfully!")

    # Process PDF Section
    st.header("2. Process Document")
    if st.button("Process PDF"):
        with st.spinner("Parsing PDF and creating embeddings..."):
            text_content = parse_pdf(pdf_path)
            if text_content:
                chunks = create_document_chunks(text_content)
                embedding_model = init_embedding_model()
                embeddings = embed_documents(chunks, embedding_model)
                store_embeddings(embeddings, chunks)
                st.success("PDF processed and embeddings stored!")
            else:
                st.error("Failed to parse PDF.")

    # Query Section
    st.header("3. Ask Questions")
    query = st.text_input("Enter your question:")
    if st.button("Get Answer"):
        if os.environ["GOOGLE_API_KEY"]:
            with st.spinner("Generating answer..."):
                response = query_with_full_context(query)
                st.write("### Answer:")
                st.write(response)
        else:
            st.error("Please enter your Google API Key in the sidebar.")
else:
    st.info("Please upload a PDF document to begin.")
